
* Source
** Shards

#+BEGIN_SRC yaml :noweb yes :tangle output/shard.yml
name: crystal_tracer
version: 0.1.0

authors:
  - Stepan Khodzhaian <stepan.khodzhaian@carwow.co.uk>

targets:
  crystal_tracer:
    main: src/crystal_tracer.cr

crystal: 0.29.0
license: MIT

dependencies:
  <<shards-dependencies>>
#+END_SRC

*** Dependencies

#+NAME: shards-dependencies
#+BEGIN_SRC yaml
stumpy_png:
  github: stumpycr/stumpy_png
  version: "~> 4.4.1"
#+END_SRC

** Entrypoint

#+BEGIN_SRC crystal :noweb yes :tangle output/src/crystal_tracer.cr
require "json"
require "stumpy_png"

require "./crystal_tracer/vector3"
require "./crystal_tracer/ray"
require "./crystal_tracer/scene"
require "./crystal_tracer/renderer"
require "./crystal_tracer/camera"
require "./crystal_tracer/sphere"

module CrystalTracer
  VERSION = "0.1.0"

  include StumpyPNG

  if ENV["SCENE"].blank? || !File.exists?(ENV["SCENE"])
    puts "Can't open scene file"
    exit 1
  end

  scene = File.open(ENV["SCENE"]) do |file|
    Scene.from_json(file)
  end

  start_time = Time.now

  Renderer.new(scene).render

  end_time = Time.now
  puts "Rendered in #{end_time - start_time}"
end
#+END_SRC

** Basic datastructure - Vector3

#+NAME: vector3
#+BEGIN_SRC crystal :tangle output/src/crystal_tracer/vector3.cr
require "stumpy_core"
include StumpyCore

alias Color = Vector3
alias Point = Vector3

struct Vector3
  def self.new(origin : Point, target : Point)
    target - origin
  end

  def self.random_unit
    Vector3.new(
      2.0 * Random.rand - 1,
      2.0 * Random.rand - 1,
      2.0 * Random.rand - 1
    ).normalize
  end

  def self.lerp(s : Vector3, e : Vector3, t : Float64)
    s + (e - s) * t
  end

  def initialize(a : Float64, b : Float64, c : Float64)
    @data = [a, b, c]
  end

  def initialize(json : JSON::PullParser)
    data = [] of Float64

    json.read_array do
      data.push Float64.new(json)
    end

    raise ArgumentError.new if data.size != 3
    @data = data
  end

  def [](i : UInt32)
    @data[i]
  end

  def *(v : Vector3)
    Vector3.new(self[0] * v[0], self[1] * v[1], self[2] * v[2])
  end

  def *(value : Float64)
    Vector3.new(self[0] * value, self[1] * value, self[2] * value)
  end

  def /(v : Vector3)
    Vector3.new(self[0] / v[0], self[1] / v[1], self[2] / v[2])
  end

  def /(value : Float64)
    Vector3.new(self[0] / value, self[1] / value, self[2] / value)
  end

  def +(v : Vector3)
    Vector3.new(self[0] + v[0], self[1] + v[1], self[2] + v[2])
  end

  def -(v : Vector3)
    Vector3.new(self[0] - v[0], self[1] - v[1], self[2] - v[2])
  end

  def clamp
    Vector3.new(
      Math.min(self[0], 1.0),
      Math.min(self[1], 1.0),
      Math.min(self[2], 1.0),
    )
  end

  def normalize
    self * (1 / len)
  end

  def len
    Math.sqrt(square_len)
  end

  def dot(v : Vector3)
    self[0] * v[0] + self[1] * v[1] + self[2] * v[2]
  end

  def square_len
    self[0] * self[0] + self[1] * self[1] + self[2] * self[2]
  end

  def to_rgba
    v = self * 255
    RGBA.from_rgb_n(v[0].to_i, v[1].to_i, v[2].to_i, 8)
  end

  def reflect(normal : Vector3)
    # r = d - 2(d . n) * n

    self - normal * (2 * self.dot(normal))
  end
end
#+END_SRC

** Ray

#+BEGIN_SRC crystal :tangle output/src/crystal_tracer/ray.cr
class Ray
  getter :origin, :direction

  def initialize(origin : Point, direction : Vector3)
    @origin = origin
    @direction = direction
  end

  def point_at_parameter(value : Float64)
    origin + (direction * value)
  end
end
#+END_SRC
** Scene

#+BEGIN_SRC crystal :tangle output/src/crystal_tracer/scene.cr
class Scene
  JSON.mapping(
    width: Int32,
    height: Int32,
    samples: Int32,
    ray_bounces: Int32,
    bg_start: Color,
    bg_end: Color,
    geometry: Array(Sphere)
  )

  def get_color(ray : Ray, depth : Int32)
    return Color.new(0,0,0) if depth == 0

    intersections = get_intersections(ray)

    return get_background_color(ray) unless intersections.any?

    sphere, distance = intersections.min_by { |i| i[1] }

    hit_point = ray.point_at_parameter(distance)
    new_ray = sphere.scatter(ray, hit_point)

    color_probe = get_color(new_ray, depth - 1)

    sphere.get_color(color_probe)
  end

  private def get_intersections(ray : Ray)
    geometry.map do |sphere|
      sphere.intersect(ray)
    end.compact
  end

  private def get_background_color(ray : Ray)
    t = 0.5 * ray.direction[1] + 1

    Vector3.lerp(bg_start, bg_end, t)
  end
end
#+END_SRC

** Renderer

#+BEGIN_SRC crystal :tangle output/src/crystal_tracer/renderer.cr
class Renderer
  private getter :scene, :canvas, :camera

  def initialize(scene : Scene)
    @scene = scene
    @canvas = Canvas.new(scene.width, scene.height)
    @camera = Camera.new(scene.width, scene.height)
  end

  def render
    canvas.map! do |_, x, y|
      get_color(x, scene.height - y).to_rgba
    end

    StumpyPNG.write(canvas, "output.png")
  end

  private def get_color(x : Int32, y : Int32)
    color = Color.new(0, 0, 0)

    (0...scene.samples).each do |_sample|
      ray = camera.build_ray_through(x, y)
      color += scene.get_color(ray, scene.ray_bounces)
    end

    (color / scene.samples.to_f).clamp
  end
end
#+END_SRC
** Camera

#+BEGIN_SRC crystal :tangle output/src/crystal_tracer/camera.cr
class Camera
  private getter :screen_width, :screen_height

  WIDTH_UNITS = 4.0_f64
  ORIGIN = Point.new(0,0,0)

  def initialize(screen_width : Int32, screen_height : Int32)
    @screen_width = screen_width
    @screen_height = screen_height
  end

  def build_ray_through(x, y)
    u = units_per_pixel * (x + Random.rand)
    v = units_per_pixel * (y + Random.rand)

    target = screen_bottom_left + Point.new(u, v, 0)
    direction = Vector3.new(ORIGIN, target).normalize

    Ray.new(ORIGIN, direction)
  end

  private def units_per_pixel
    @units_per_pixel ||= Float64.new(WIDTH_UNITS / screen_width)
  end

  private def screen_bottom_left
    @screen_bottom_left ||= Point.new(-WIDTH_UNITS / 2, -height_units / 2, -1)
  end

  private def height_units
    @height_units ||= Float64.new(WIDTH_UNITS * screen_height / screen_width)
  end
end
#+END_SRC
** Sphere

#+BEGIN_SRC crystal :tangle output/src/crystal_tracer/sphere.cr
class Sphere
  JSON.mapping(
    center: Point,
    radius: Float64,
    color: Color,
    roughness: Float64,
    emission: { type: Float64, default: 0.0 }
  )

  def intersect(ray : Ray)
    o = ray.origin
    n = ray.direction
    oc = Vector3.new(o, center)

    os = oc.dot(n)

    sc = Math.sqrt(oc.square_len - os * os)

    return nil if os < 0 || sc >= radius

    is = Math.sqrt(radius * radius - sc * sc)

    oi = os - is

    {self, oi}
  end

  def get_color(probe : Color)
    return color * emission if light_source?

    color * probe
  end

  def scatter(ray : Ray, hit_point : Point)
    normal = normal(hit_point)

    reflect_direction = ray.direction.reflect(normal) * (1 - roughness)
    diffuse_direction = (normal + Vector3.random_unit) * roughness

    result_direction = (reflect_direction + diffuse_direction).normalize

    Ray.new(hit_point, result_direction)
  end

  private def normal(hit_point : Point)
    Vector3.new(center, hit_point).normalize
  end

  private def light_source?
    emission > 0
  end
end
#+END_SRC
* Scene configuration

#+BEGIN_SRC js :tangle output/scene.json
{
  "width": 800,
  "height": 600,
  "samples": 100,
  "ray_bounces": 15,
  "bg_start": [1, 1, 1],
  "bg_end" : [0.5, 0.7, 1.0],
  "geometry": [
    {
      "center": [0, 12.5, -4],
      "radius": 8.1,
      "color": [1, 1, 1],
      "emission": 10.0,
      "roughness": 1
    },
    {
      "center": [-0.8, -0.5, -4],
      "radius": 1,
      "color": [0.78, 0.6, 0.78],
      "roughness": 1
    },
    {
      "center": [1, -1, -2.5],
      "radius": 0.5,
      "color": [0.8, 0.49, 0.19],
      "roughness": 0
    }
  ]
}
#+END_SRC
